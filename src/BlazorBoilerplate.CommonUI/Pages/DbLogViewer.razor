@page "/dBlog_viewer"
@*@attribute [Authorize(Policy =Policies.IsAdmin)]*@

@inject HttpClient Http
@inject IMatToaster matToaster
@using BlazorBoilerplate.Shared.DataModels
@using static Microsoft.AspNetCore.Http.StatusCodes
@using System.Xml;

<h1>Serilog MSSqlDb Log Viewer</h1>
<p>

</p>

@if (apiResponses == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading SQL Log Data</label>
    </LoadingBackground>
}
else
{
    <MatTable Items="@dBLogItems" Class="mat-elevation-z5" Striped="true" PageSizeParamName="pageSize">
        <MatTableHeader>
            <th><div style="width:175px;"><MatFAB Icon="refresh" OnClick="@(async () => await LoadData())" Raised="true" Mini="true" Style="margin-right:16px;"></MatFAB> Timestamp</div></th>
            <th>Loging Level</th>
            <th>Log Message</th>
            <th>Exception (if any)</th>
            <th>Properties recorded with log Entry</th>

        </MatTableHeader>
        <MatTableRow>
            <td>@context.TimeStamp.ToString()</td>
            <td>@context.Level</td>
            <td><span style="font-size:small">@context.Message</span></td>
            <td><span style="font-size:small">@context.Exception?.ToString()</span></td>
            <td>
                @if (context.LogProperties?.Any() ?? false)
                    {
                    <ul>
                        @foreach (var propertyPair in context.LogProperties)
                            {
                            <li style="font-size:small">@($"{propertyPair.Key}:  {propertyPair.Value}"))</li>
                            }
                    </ul>
                    }
            </td>
        </MatTableRow>
    </MatTable>
}


@code {
    ApiResponseDto[] apiResponses = new ApiResponseDto[] { };
    List<DbLog> dBLogItems = new List<DbLog>();

    private int pageSize { get; set; } = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task PaginationWrapperAsync(int page)
    {

    }
    protected async Task LoadData(int page = 0)
    {
        ApiResponseDto apiResponse = null;
        try
        {
            apiResponse = await Http.GetJsonAsync<ApiResponseDto>($"api/DbLog?page={page}&pageSize={this.pageSize}");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

        if (apiResponse.StatusCode == Status200OK)
        {

            matToaster.Add(apiResponse.Message, MatToastType.Success, "Api Log Items Retrieved");
            var nextPage = Newtonsoft.Json.JsonConvert.DeserializeObject<DbLog[]>(apiResponse.Result.ToString()).ToList<DbLog>();
            dBLogItems.AddRange(nextPage);
        }
        else if (apiResponse.StatusCode == Status204NoContent)
        {
            matToaster.Add(String.Empty, MatToastType.Info, "No more logs to fetch");

        }
        else
        {
            matToaster.Add(apiResponse.Message, MatToastType.Danger, "Api Log Items Retrieval Failed");
        }
    }



}
